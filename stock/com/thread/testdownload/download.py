#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2017/1/11 0011 17:04
# @Author  : Aries
# @Site    : 
# @File    : download.py
# @Software: PyCharm
import os
import socket
import types
import urllib
from multiprocessing.pool import Pool

import tushare as ts
from time import ctime

from BeautifulSoup import BeautifulSoup


codes = ['603060',
'002818',
'600558',
'601882',
'300556',
'002655',
'002053',
'002716',
'002207',
'603203',
'000510',
'002632',
'002816',
'000953',
'300557',
'600280',
'600321',
'603016',
'002813',
'600330',
'300553',
'603716',
'600547',
'603667',
'300526',
'002817',
'603160',
'300560',
'300551',
'300550',
'300086',
'002155',
'002141',
'603258',
'601020',
'603663',
'603888',
'300414',
'002735',
'600988',
'603859',
'600288',
'603726',
'300552',
'300559',
'002316',
'002679',
'002651',
'300558',
'601500',
'600647',
'300402',
'601069',
'002656',
'600489',
'300175',
'002486',
'002808',
'002237',
'000002',
'600798',
'002113',
'002574',
'600891',
'300320',
'603777',
'002731',
'000980',
'000678',
'002812',
'600531',
'601015',
'601899',
'002253',
'002125',
'300050',
'000409',
'603005',
'600130',
'000524',
'002649',
'002291',
'600470',
'600766',
'002436',
'600086',
'600415',
'600234',
'000633',
'600182',
'000691',
'600857',
'601058',
'600311',
'000798',
'300062',
'600395',
'600385',
'603007',
'603322',
'600833',
'603909',
'603313',
'002647',
'002147',
'300411',
'000564',
'603515',
'300530',
'002455',
'002392',
'002335',
'000426',
'600469',
'002815',
'300540',
'600612',
'600543',
'000937',
'002801',
'300527',
'300535',
'300090',
'002344',
'000725',
'600098',
'002539',
'300515',
'600735',
'600796',
'600567',
'600052',
'300503',
'600355',
'600691',
'000918',
'002732',
'300517',
'000599',
'600711',
'603188',
'600707',
'002648',
'600520',
'300176',
'600275',
'600655',
'300225',
'603029',
'600378',
'000537',
'300516',
'002229',
'600682',
'603958',
'002810',
'600459',
'300285',
'002027',
'002412',
'601218',
'600139',
'000912',
'600678',
'002199',
'002538',
'600362',
'002805',
'000707',
'002040',
'000892',
'002630',
'603031',
'601992',
'002366',
'300284',
'600156',
'601011',
'002722',
'601969',
'000878',
'000506',
'002442',
'300121',
'000859',
'300539',
'002770',
'002811',
'002143',
'002136',
'603223',
'002652',
'300538',
'000529',
'000679',
'300043',
'600807',
'002345',
'000509',
'002696',
'300109',
'601800',
'002552',
'600114',
'600160',
'002706',
'603658',
'300012',
'600251',
'601699',
'601789',
'002778',
'603090',
'002497',
'300044',
'600219',
'601678',
'000782',
'601100',
'000661',
'000635',
'002122',
'000587',
'000850',
'000401',
'000503',
'000573',
'603159',
'600581',
'600892',
'002723',
'300390',
'600782',
'600997',
'300543',
'000731',
'603701',
'603843',
'601668',
'603398',
'601010',
'600162',
'300521',
'600128',
'002495',
'002051',
'000525',
'000922',
'603421',
'603816',
'002606',
'002052',
'000043',
'002645',
'002220',
'600533',
'600096',
'600259',
'000818',
'000899',
'002568',
'600873',
'300331',
'002793',
'600614',
'603718',
'002686',
'000951',
'002637',
'002134',
'600381',
'002581',
'300135',
'002549',
'002756',
'000589',
'600290',
'600667',
'000301',
'000632',
'000925',
'601677',
'002668',
'300436',
'600549',
'600740',
'002354',
'600348',
'300296',
'000887',
'002535',
'002489',
'300126',
'002753',
'000856',
'000737',
'600392',
'600399',
'300507',
'002600',
'603606',
'300534',
'000698',
'603887',
'601666',
'000977',
'600307',
'600421',
'002517',
'002613',
'300546',
'300522',
'600063',
'600379',
'300479',
'300541',
'600962',
'300487',
'600695',
'600252',
'603131',
'000407',
'300449',
'000702',
'000751',
'603688',
'600223',
'601965',
'600824',
'002614',
'300447',
'000807',
'603729',
'002558',
'002013',
'300499',
'000935',
'600448',
'300174',
'600896',
'603100',
'603600',
'300061',
'002411',
'002780',
'000603',
'600579',
'603611',
'002399',
'300297',
'002365',
'300523',
'002269',
'300084',
'600370',
'300433',
'600751',
'600686',
'603101',
'002465',
'300167',
'002577',
'300501',
'600506',
'600382',
'300181',
'603299',
'002800',
'601898',
'002404',
'000970',
'002806',
'601233',
'000680',
'300064',
'000688',
'000736',
'300030',
'300205',
'600222',
'600761',
'600383',
'002788',
'002573',
'002272',
'002566',
'000530',
'000690',
'002791',
'002038',
'002388',
'600728',
'002116',
'002294',
'002529',
'002278',
'300322',
'600439',
'002309',
'000983',
'002342',
'002676',
'600398',
'000065',
'002070',
'002194',
'002021',
'000523',
'300252',
'000568',
'600361',
'300316',
'600827',
'300531',
'603099',
'300334',
'600393',
'600753',
'600792',
'002708',
'603636',
'600779',
'300248',
'300341',
'000837',
'300547',
'002209',
'300498',
'002476',
'000505',
'600491',
'601168',
'002689',
'002119',
'002684',
'002103',
'603993',
'002410',
'002494',
'002180',
'000010',
'600123',
'002419',
'601689',
'002225',
'600232',
'000967',
'002742',
'601208',
'002447',
'002763',
'002133',
'600265',
'002286',
'000615',
'600982',
'000728',
'000630',
'600971',
'600829',
'002208',
'600143',
'000701',
'600569',
'300511',
'002790',
'600497',
'000893',
'002809',
'600466',
'000889',
'002073',
'600007',
'601996',
'000060',
'603268',
'600444',
'300065',
'600738',
'002240',
'600136',
'601018',
'002540',
'002203',
'002068',
'600789',
'300022',
'300468',
'600606',
'600775',
'600665',
'002605',
'000995',
'600210',
'300102',
'002675',
'002322',
'000666',
'300132',
'002597',
'002425',
'002599',
'600403',
'002008',
'002795',
'000972',
'002330',
'000929',
'000408',
'002453',
'300529',
'002550',
'600576',
'600338',
'002202',
'300505',
'300375',
'603338',
'603069',
'000606',
'002288',
'002092',
'002669',
'002358',
'300145',
'300549',
'603067',
'600208',
'600401',
'002611',
'000910',
'000656',
'002653',
'600022',
'000795',
'000610',
'002547',
'000595',
'600282',
'000757',
'600719',
'601188',
'300206',
'600493',
'000979',
'000906',
'002146',
'600166',
'000758',
'002533',
'600978',
'300096',
'002397',
'600079',
'000586',
'600094',
'300347',
'600185',
'002427',
'600697',
'002695',
'603001',
'000040',
'300458',
'300119',
'600503',
'600236',
'600868',
'000727',
'300518',
'002420',
'601088',
'002162',
'600106',
'600893',
'600358',
'300191',
'600966',
'000996',
'603798',
'002243',
'000902',
'000962',
'002591',
'600822',
'600171',
'300107',
'002072',
'000732',
'002033',
'600078',
'600482',
'600806',
'600202',
'300224',
'002692',
'002589',
'600326',
'600048',
'000157',
'600708',
'600681',
'600588',
'300017',
'600726',
'002446',
'002464',
'300469',
'600159',
'002473',
'601186',
'001979',
'300364',
'002603',
'002728',
'000400',
'600368',
'002693',
'002499',
'002530',
'600031',
'600521',
'600620',
'000671',
'300434',
'600266',
'300533',
'002376',
'600300',
'603519',
'002715',
'300234',
'300029',
'600247',
'000592',
'002109',
'600633',
'600458',
'601700',
'000419',
'000553',
'002128',
'002306',
'002773',
'300103',
'002099',
'000636',
'601021',
'000403',
'002312',
'000402',
'600149',
'600816',
'002639',
'000978',
'600090',
'002198',
'002333',
'300238',
'600137',
'600573',
'002247',
'600594',
'603588',
'300399',
'300081',
'601799',
'600714',
'002341',
'002438',
'002301',
'300342',
'600793',
'000038',
'300230',
'603986',
'603838',
'603737',
'603518',
'603399',
'601958',
'601900',
'601880',
'601798',
'601727',
'601311',
'601116',
'601101',
'601008',
'601005',
'600986',
'600890',
'600881',
'600876',
'600859',
'600855',
'600797',
'600776',
'600773',
'600768',
'600764',
'600760',
'600747',
'600743',
'600733',
'600725',
'600724',
'600693',
'600687',
'600675',
'600671',
'600663',
'600636',
'600621',
'600608',
'600587',
'600577',
'600552',
'600545',
'600539',
'600525',
'600481',
'600480',
'600462',
'600432',
'600390',
'600346',
'600335',
'600331',
'600325',
'600319',
'600301',
'600271',
'600257',
'600255',
'600242',
'600239',
'600233',
'600228',
'600225',
'600212',
'600209',
'600189',
'600157',
'600145',
'600097',
'600093',
'600071',
'600069',
'600060',
'600021',
'300537',
'300513',
'300510',
'300496',
'300480',
'300477',
'300473',
'300466',
'300459',
'300456',
'300427',
'300410',
'300398',
'300374',
'300353',
'300324',
'300323',
'300311',
'300300',
'300293',
'300282',
'300276',
'300273',
'300268',
'300267',
'300259',
'300243',
'300231',
'300223',
'300219',
'300213',
'300200',
'300198',
'300190',
'300180',
'300179',
'300165',
'300150',
'300149',
'300143',
'300123',
'300120',
'300116',
'300111',
'300100',
'300088',
'300080',
'300076',
'300053',
'300047',
'300039',
'300027',
'300004',
'002821',
'002798',
'002779',
'002745',
'002725',
'002721',
'002674',
'002659',
'002642',
'002640',
'002635',
'002629',
'002608',
'002585',
'002584',
'002583',
'002578',
'002576',
'002571',
'002564',
'002526',
'002510',
'002509',
'002492',
'002485',
'002479',
'002478',
'002462',
'002459',
'002440',
'002423',
'002408',
'002396',
'002389',
'002379',
'002378',
'002377',
'002374',
'002297',
'002282',
'002259',
'002242',
'002239',
'002223',
'002175',
'002165',
'002160',
'002145',
'002138',
'002129',
'002115',
'002102',
'002098',
'002076',
'002075',
'002074',
'002071',
'002061',
'002059',
'002055',
'002039',
'002034',
'002025',
'002001',
'000987',
'000975',
'000949',
'000923',
'000916',
'000831',
'000829',
'000825',
'000823',
'000812',
'000803',
'000755',
'000748',
'000719',
'000717',
'000711',
'000710',
'000709',
'000693',
'000682',
'000670',
'000662',
'000659',
'000655',
'000651',
'000622',
'000611',
'000609',
'000584',
'000576',
'000571',
'000563',
'000560',
'000558',
'000552',
'000547',
'000543',
'000538',
'000533',
'000531',
'000511',
'000415',
'000100',
'000066',
'000062',
'000058',
'000050',
'000045',
'000042',
'000037',
'000029',
'000028',
'300266',
'300069',
'000023',
'600980',
'000989',
'002349',
'002088',
'002368',
'002758',
'002445',
'600000',
'300015',
'603558',
'300202',
'002456',
'600111',
'600188',
'600165',
'600867',
'600276',
'300007',
'603678',
'600508',
'601155',
'002380',
'600015',
'002475',
'600870',
'300352',
'600455',
'603010',
'000950',
'300241',
'600217',
'600562',
'600963',
'600054',
'600211',
'600600',
'300416',
'000590',
'000780',
'601616',
'600657',
'600900',
'002644',
'601238',
'601717',
'002522',
'600532',
'600428',
'002305',
'600121',
'300536',
'300265',
'600599',
'000418',
'600084',
'000809',
'002007',
'600817',
'600107',
'600628',
'600848',
'300519',
'002356',
'002315',
'600841',
'000502',
'000620',
'300291',
'002221',
'002386',
'603738',
'600256',
'600190',
'600763',
'002117',
'000526',
'600536',]

def save_pic(pic_url,filename):
    count = 0
    while True:
        try:
            print 'picture',filename,'begin...'
            urllib.urlretrieve(pic_url,filename)
        except socket.timeout:
            print 'timeout',filename,'count:',count
            count += 1
        except Exception,e:
            print filename,'other fault:',e
            count += 1
        else:
            print 'picture',filename,'save successfully ! it has tried to download ',count,' times'


def save_pictures(urls):
    print 'save_pictures function'
    # create_dirs(urls)
    result = get_url_and_filename(urls)
    p = Pool(40)
    count = 0
    totalnum = len(result)
    for item in result:
        print item[0],item[1]
        count += 1
        p.apply_async(save_pic,args=(item[0],item[1]))
    p.close()
    p.join()
    print 'all save successfully !!!'



def get_url_and_filename(urls):
    pass

def get_pic_urls():
    path = 'http://image.baidu.com/search/index?tn=baiduimage&ipn=r&ct=201326592&cl=2&lm=-1&st=-1&fm=index&fr=&hs=0&sf=1&fmq=&pv=&ic=0&nc=1&z=&se=1&showtab=0&fb=0&width=&height=&face=0&istype=2&ie=utf-8&word=%E7%BE%8E%E5%A5%B3&oq=%E7%BE%8E%E5%A5%B3&rsp=-1'
    rt = urllib.urlopen(path).read()
    bs = BeautifulSoup(rt).findAll('img')
    print len(bs)
    urls = []
    for i in range(len(bs)):
        url = bs[i].get('src')
        urls.append(url)
    return urls














def download_code(code):
    print 'download_code'
    path = 'E:/stock/csv/kline/testthread/'  # +str(DateUtils().get_current_date())+'/'

    failCodes = []
    try:
        socket.setdefaulttimeout(100)
        # stock_list = ts.get_stock_basics()

        # 入库
        # index = stock_list.index.size

        # for i in range(0, index):
        # 获取股票代码
        # code = stock_list.index.values[i]
        downloadDataToCsv(code, path)
        print '【' + str(code) + '】 数据下载成功！'
    except Exception as e:
        if code != None:
            failCodes.append(code)
        print '【' + str(code) + '】  数据下载失败！ 原因： ' + str(e)
        pass
    cnt = 1
    while len(failCodes) > 0:
        print '第' + str(cnt) + '次循环，' + str(len(failCodes)) + '条失败'
        downloadDataToCsv(failCodes.pop(), path)




def downloadDataToCsv(code, path):
    try:
        if not os.path.exists(path):
            os.makedirs(path)
        socket.setdefaulttimeout(100)
        # self.__logger.info('begining download stock history data to csv! code = [' + str(code) + ']')
        stock_data = ts.get_hist_data(code)
        if type(stock_data) != types.NoneType:
            stock_data.to_csv(path + 'stock_his_data_' + str(code) + '.csv')
            # self.__logger.info('download stock history data to csv successful! code = [' + str(code) + ']')
    except Exception as e:
        print(
            'download stock history data failed! code = [' + str(code) + '] , Error = [' + str(e) + ']')




def download_codes(codes):
    print 'download_codes'
    # create_dirs(urls)
    # result = get_url_and_filename(urls)
    p = Pool(40)
    count = 0
    # totalnum = len(result)
    for code in codes:
        # print item[0],item[1]
        count += 1
        p.apply_async(download_code,args=(code))
    p.close()
    p.join()
    # print 'all save successfully !!!'


if __name__=='__main__':
    # get_pic_urls();
    path = 'E:/stock/csv/kline/testthread/'
    print '开始下载股票历史K线数据......' + str(ctime())

    # 多线程 1.5min
    # download_codes(codes)

    #单线程 5min
    for code in codes:
        download_code(code)

    print '股票历史K线数据下载完成...' + str(ctime()) + '  共 [' + str(len(codes)) + '] 只'